{"version":3,"file":"static/js/57.3bf3461c.chunk.js","mappings":"4QAEaA,EAAOC,EAAAA,EAAAA,GAAH,sMAWJC,EAAOD,EAAAA,EAAAA,GAAH,uMAUJE,EAAOF,EAAAA,EAAAA,EAAH,4D,SCpBJG,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEvBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,0BACE,SAACP,EAAD,iBACGK,QADH,IACGA,OADH,EACGA,EAAUG,KAAI,YAAsC,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACvC,OACE,SAACV,EAAD,WACE,UAAC,KAAD,CAAMW,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAA1C,WAEE,gBACEU,IAXA,kCAWeL,EACfM,IAAKP,GAASE,EACdM,MAAM,MACNC,OAAO,SAET,SAAChB,EAAD,UAAOO,GAASE,QATTH,EAad,OAIR,E,SCAD,EAtBa,WACX,OAAgCW,EAAAA,EAAAA,UAAS,MAAzC,eAAOf,EAAP,KAAiBgB,EAAjB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,MAF3B,OAEUlB,EAFV,OAGIgB,EAAYhB,GAHhB,gDAKImB,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,KAED,4BACE,2CACCrB,IAAY,SAACD,EAAD,CAAcC,SAAWA,MAG3C,C,8LCxBDsB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHL,EAAkB,mCAAG,oGAETI,EAAAA,EAAAA,IAAA,sCAAyCC,IAFhC,cAE1BC,EAF0B,yBAGzBA,EAASC,KAAKC,QAAQvB,KAAI,YAC/B,MAAO,CACLC,GAFmE,EAAnCA,GAGhCC,MAHmE,EAA/BA,MAIpCC,YAJmE,EAAxBA,YAK3CC,KALmE,EAAXA,KAO3D,KAV+B,2CAAH,qDAalBoB,EAAgB,mCAAG,WAAMC,GAAN,uFACPN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,oBAAqCL,IAD9B,cACxBC,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,sDAKhBI,EAAO,mCAAG,WAAMC,GAAN,uFACER,EAAAA,EAAAA,IAAA,iBACXQ,EADW,4BACcP,EADd,oBADF,cACfC,EADe,yBAIdA,EAASC,KAAKM,KAAK5B,KAAI,YAC5B,MAAO,CACLI,KAFqE,EAAxCA,KAG7ByB,UAHqE,EAAlCA,UAInCC,aAJqE,EAAvBA,aAK9C7B,GALqE,EAATA,GAO/D,KAXoB,2CAAH,sDAcP8B,EAAU,mCAAG,WAAMJ,GAAN,uFACDR,EAAAA,EAAAA,IAAA,iBACXQ,EADW,4BACcP,EADd,2BADC,cAClBC,EADkB,yBAIjBA,EAASC,KAAKC,QAAQvB,KAAI,YAC/B,MAAO,CACLgC,OAF0D,EAA1BA,OAGhCC,QAH0D,EAAlBA,QAIxChC,GAJ0D,EAATA,GAMpD,KAVuB,2CAAH,sDAaViC,EAAS,mCAAG,WAAMP,GAAN,uFACAR,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACqBO,EADrB,YADA,cACjBN,EADiB,yBAIhBA,EAASC,KAAKC,QAAQvB,KAAI,YAC/B,MAAO,CACLC,GAFmE,EAAnCA,GAGhCC,MAHmE,EAA/BA,MAIpCC,YAJmE,EAAxBA,YAK3CC,KALmE,EAAXA,KAO3D,KAXsB,2CAAH,qD","sources":["components/TrendingList/TrendingList.styled.js","components/TrendingList/TrendingList.jsx","pages/Home.jsx","servise/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  gap: 10;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  margin: 20px;\n  width: 300px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  background-color: #ffffff;\n  transition: 0.25s;\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  color: blue;\n`;\n\n","import { Link, useLocation } from 'react-router-dom';\nimport { List, Item, Text } from './TrendingList.styled';\n\nexport const TrendingList = ({ trending }) => {\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n  const location = useLocation();\n  return (\n    <div>\n      <List>\n        {trending?.map(({id, title, poster_path, name} ) => {\n          return (\n            <Item key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {/* {title} */}\n                <img\n                  src={IMG_URL + poster_path}\n                  alt={title || name}\n                  width=\"300\"\n                  height=\"450\"\n                />\n                <Text>{title || name}</Text>\n              </Link>\n            </Item>\n          );\n        })}\n    </List>\n    </div>\n  );\n}","// import { Outlet } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport {TrendingList} from \"../components/TrendingList/TrendingList\"\nimport {fetchTrendingFilms} from \"../servise/api\";\n\n\nconst Home = () => {\n  const [trending, setTrending] = useState(null);\n\n  useEffect(() => {\n    async function getTrending() {\n      try {\n        const trending = await fetchTrendingFilms();\n        setTrending(trending);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    getTrending();\n  }, []);\n  return (\n    <div>\n      <h1>Trending today</h1>\n      {trending && <TrendingList trending={ trending }/>}\n    </div>\n  );\n};\n\nexport default Home;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8d04aa17424a03dfb8bf9da86b904800';\n\nexport const fetchTrendingFilms = async () => {\n\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results.map(({ id, title, poster_path, name }) => {\n    return {\n      id,\n      title,\n      poster_path,\n      name,\n    };\n  });\n}\n\nexport const fetchDetailFilms = async velue => { \n  const response = await axios.get(`/movie/${velue}?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport const getCast = async value => {\n  const response = await axios.get(\n    `/movie/${value}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast.map(({ name, character, profile_path, id }) => {\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n};\n\nexport const getReviews = async value => {\n  const response = await axios.get(\n    `/movie/${value}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ author, content, id }) => {\n    return {\n      author,\n      content,\n      id,\n    };\n  });\n};\n\nexport const getMovies = async value => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${value}&page=1`\n  );\n  return response.data.results.map(({ id, title, poster_path, name }) => {\n    return {\n      id,\n      title,\n      poster_path,\n      name,\n    };\n  });\n};"],"names":["List","styled","Item","Text","TrendingList","trending","location","useLocation","map","id","title","poster_path","name","to","state","from","src","alt","width","height","useState","setTrending","useEffect","fetchTrendingFilms","console","log","getTrending","axios","API_KEY","response","data","results","fetchDetailFilms","velue","getCast","value","cast","character","profile_path","getReviews","author","content","getMovies"],"sourceRoot":""}